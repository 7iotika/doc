# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-07-20 10:20+0300\n"
"PO-Revision-Date: 2016-07-20 12:14+0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"Language: ru\n"
"X-Generator: Poedit 1.8.8\n"

#: ../intro.rst:28
msgid "Overview"
msgstr "Общие сведения"

#: ../intro.rst:32
msgid "An Application Server Together With A Database Manager"
msgstr "Сервер приложений + СУБД"

#: ../intro.rst:35
msgid ""
"Tarantool is a Lua application server integrated with a database "
"management system. It has a \"fiber\" model which means that many "
"Tarantool applications can run simultaneously on a single thread, while "
"the Tarantool server itself can run multiple threads for input-output "
"and background maintenance. It incorporates the LuaJIT -- \"Just In Time"
"\" -- Lua compiler, Lua libraries for most common applications, and the "
"Tarantool Database Server which is an established NoSQL DBMS. Thus "
"Tarantool serves all the purposes that have made node.js and Twisted "
"popular, plus it supports data persistence."
msgstr ""
"Tarantool представляет собой сервер приложений на языке Lua, "
"интегрированный с СУБД. В основе Tarantool лежат файберы (fibers), что "
"позволяет нескольким Lua-приложениям работать в одном потоке (thread), "
"при этом Tarantool-сервер может одновременно запускать другие потоки для "
"обработки ввода-вывода данных и фоновых сервисных задач. Tarantool "
"включает в себя LuaJIT (Just In Time) Lua-компилятор, Lua-библиотеки для "
"решения наиболее частых задач, а также сервер баз данных Tarantool, "
"представляющий собой NoSQL СУБД. Таким образом, Tarantool может всё то "
"же, что node.js и Twisted, а кроме того обеспечивает сохранность данных."

#: ../intro.rst:43
msgid ""
"The code is free. The open-source license is `BSD license`_. The "
"supported platforms are GNU/Linux, Mac OS and FreeBSD."
msgstr ""
"Tarantool -- это open-source проект. Исходный код открыт для всех и "
"распространяется бесплатно согласно лицензии `BSD license`_. "
"Поддерживаемые платформы: GNU / Linux, Mac OS и FreeBSD."

#: ../intro.rst:46
msgid ""
"Tarantool's creator and biggest user is `Mail.Ru`_, the largest internet "
"company in Russia, with 30 million users, 25 million emails per day, and "
"a web site whose Alexa global rank is in the `top 40`_ worldwide. "
"Tarantool services Mail.Ru's hottest data, such as the session data of "
"online users, the properties of online applications, the caches of the "
"underlying data, the distribution and sharding algorithms, and much "
"more. Outside Mail.Ru the software is used by a growing number of "
"projects in online gaming, digital marketing, and social media "
"industries. Although Mail.Ru is the sponsor for product development, the "
"roadmap and the bugs database and the development process are fully "
"open. The software incorporates patches from dozens of community "
"contributors. The Tarantool community writes and maintains most of the "
"drivers for programming languages.  The greater Lua community has "
"hundreds of useful packages most of which can become Tarantool "
"extensions."
msgstr ""
"Создателем Tarantool'а -- а также его основным пользователем -- является "
"компания `Mail.Ru`_, крупнейшая Интернет-компания России (30 млн "
"пользователей, 25 млн электронных писем в день, веб-сайт в списке `top "
"40`_ международного Alexa-рейтинга). Tarantool используется для "
"обработки самых \"горячих\" данных Mail.Ru, таких как данные "
"пользовательских онлайн-сессий, настройки онлайн-приложений, кеширование "
"сервисных данных, алгоритмы распределения данных и шардинга, и т.д. "
"Tarantool также используется во всё большем количестве проектов вне стен "
"Mail.Ru. Это, к примеру, онлайн-игры, цифровой маркетинг, социальные "
"сети. Несмотря на то что Mail.Ru спонсирует разработку Tarantool'а, весь "
"процесс разработки, в т.ч. дальнейшие планы и база обнаруженных ошибок, "
"является полностью открытым. В Tarantool включены патчи от большого "
"числа сторонних разработчиков. Усилиями сообщества разработчиков "
"Tarantool'а были написаны (и далее поддерживаются) библиотеки для "
"подключения модулей на внешних языках программирования. А сообщество Lua-"
"разработчиков предоставило сотни полезных пакетов, большинство из "
"которых можно использовать в качестве расширений для Tarantool'а."

#: ../intro.rst:60
msgid ""
"Users can create, modify and drop **Lua functions** at runtime. Or they "
"can define **Lua programs** that are loaded during startup for triggers, "
"background tasks, and interacting with networked peers. Unlike popular "
"application development frameworks based on a \"reactor\" pattern, "
"networking in server-side Lua is sequential, yet very efficient, as it "
"is built on top of the **cooperative multitasking** environment that "
"Tarantool itself uses."
msgstr ""
"Пользователи Tarantool'а могут создавать, изменять и удалять **Lua-"
"функции** прямо во время исполнения кода. Также они могут указывать "
"**Lua-программы**, которые будут загружаться во время запуска "
"Tarantool'а. Такие программы могут служить триггерами, выполнять фоновые "
"задачи и взаимодействовать с другими программами по сети. В отличие от "
"многих популярных сред разработки приложений, которые используют "
"\"реактивный\" принцип, сетевое взаимодействие в Lua устроено "
"последовательно, но очень эффективно, т.к. оно использует среду "
"**взаимной многозадачности** самого Tarantool'а."

#: ../intro.rst:68
msgid ""
"One of the built-in Lua packages is an API for the Database Management "
"System. Thus some developers see Tarantool as a DBMS with a popular "
"stored procedure language, while others see it as a Lua interpreter, "
"while still others see it as a replacement for many components of multi-"
"tier Web applications. Performance can be a few hundred thousand "
"transactions per second on a laptop, scalable upwards or outwards to "
"server farms."
msgstr ""
"Один из встраиваемых Lua-пакетов -- это API для функционала СУБД. Таким "
"образом, некоторые разработчики рассматривают Tarantool как СУБД с "
"популярным языком для написания хранимых процедур, другие рассматривают "
"его как Lua-интерпретатор, а третьи -- как вариант замены сразу "
"нескольких компонентов в многозвенных веб-приложениях. "
"Производительность Tarantool'а может достигать сотен тысяч транзакций в "
"секунду на ноутбуке, и ее можно наращивать \"вверх\" или \"вширь\" за "
"счет новых серверных ферм."

#: ../intro.rst:78
msgid "Database Features"
msgstr "Особенности функционала СУБД"

#: ../intro.rst:80
msgid ""
"Tarantool can run without it, but \"The Box\" -- the DBMS server -- is a "
"strong distinguishing feature."
msgstr ""
"Компонент \"box\" -- серверная часть с функционалом СУБД -- это важная "
"часть Tarantool'а, хотя он может работать и без данного компонента."

#: ../intro.rst:83
msgid ""
"The database API allows for permanently storing Lua objects, managing "
"object collections, creating or dropping secondary keys, making changes "
"atomically, configuring and monitoring replication, performing "
"controlled fail-over, and executing Lua code triggered by database "
"events. Remote database instances are accessible transparently via a "
"remote-procedure-invocation API."
msgstr ""
"API для функционала СУБД позволяет хранить Lua-объекты, управлять "
"коллекциями объектов, создавать и удалять вторичные ключи, делать "
"атомарные изменения, конфигурировать и мониторить репликацию, "
"производить контролируемое переключение при отказе (failover), а также "
"исполнять код на Lua, который вызывается событиями в базе. А для "
"прозрачного доступа к удаленным (remote) экземплярам баз данных "
"разработан API для вызова удаленных процедур."

#: ../intro.rst:91
msgid ""
"Tarantool's DBMS server uses the **storage engine** concept, where "
"different sets of algorithms and data structures can be used for "
"different situations. Two storage engines are built-in: an in-memory "
"engine which has all the data and indexes in RAM, and a two-level B-tree "
"engine for data sets whose size is 10 to 1000 times the amount of "
"available RAM. All storage engines in Tarantool support transactions and "
"replication by using a common **write ahead log** (WAL). This ensures "
"consistency and crash safety of the persistent state. Changes are not "
"considered complete until the WAL is written. The logging subsystem "
"supports group commit."
msgstr ""
"В архитектуре серверной части СУБД Tarantool'а реализована концепция "
"\"движков\" базы данных (storage engines), где в разных ситуациях "
"используются разные наборы алгоритмов и структуры данных. В Tarantool'е "
"есть два встроенных движка: in-memory движок, который держит все данные "
"и индексы в оперативной памяти, и двухуровневый движок для B-деревьев, "
"который обрабатывает данные размером в 10-1000 раз больше того, что "
"может поместиться в оперативной памяти. Все движки в Tarantool'е "
"поддерживают транзакции и репликацию, поскольку они используют единый "
"механизм **упреждающей записи** (WAL = write ahead log). Это механизм "
"обеспечивает консистентность и сохранность данных при сбоях. Таким "
"образом, изменения не считаются завершенными, пока не проходит запись в "
"лог WAL. Подсистема логирования также поддерживает групповые коммиты. "

#: ../intro.rst:102
msgid ""
"**Tarantool's in-memory storage engine** (memtx) keeps all the data in "
"random-access memory, and therefore has very low read latency. It also "
"keeps persistent copies of the data in non-volatile storage, such as "
"disk, when users request \"snapshots\". If a server stops and the random-"
"access memory is lost, then restarts, it reads the latest snapshot and "
"then replays the transactions that are in the log -- therefore no data "
"is lost."
msgstr ""
"**In-memory движок** (memtx) хранит все данные в оперативной памяти, "
"поэтому время ожидания при чтении у него очень мало. Также, когда "
"пользователи запрашивают статические снимки (snapshots), этот движок "
"создает персистентные копии данных в постоянной памяти, например на "
"жестком диске. Если Tarantool-сервер прекращает работать и данные в "
"оперативной памяти теряются, то при следующем запуске Tarantool-сервер "
"загружает в память самую свежую копию данных с диска и применяет к ней "
"все транзакции из лога, которые были сделаны с момента создания копии. "
"Таким образом, данные при сбое не теряются."

#: ../intro.rst:111
msgid ""
"**Tarantool's in-memory engine is lock-free** in typical situations. "
"Instead of the operating system's concurrency primitives, such as "
"mutexes, Tarantool uses cooperative multitasking to handle thousands of "
"connections simultaneously. There is a fixed number of independent "
"execution threads. The threads do not share state. Instead they exchange "
"data using low-overhead message queues. While this approach limits the "
"number of cores that the server will use, it removes competition for the "
"memory bus and ensures peak scalability of memory access and network "
"throughput. CPU utilization of a typical highly-loaded Tarantool server "
"is under 10%. Searches are possible via **secondary index keys** as well "
"as primary keys."
msgstr ""
"В штатных ситуациях **in-memory движок работает без блокировок**. Вместо "
"низкоуровневых механизмов параллельной обработки данных, которые "
"предлагает операционная система (например, mutex'ов), Tarantool "
"использует среду взаимной многозадачности, и таким образом может "
"работать с тысячами соединений одновременно. В Tarantool'е есть "
"фиксированное количество независимых нитей (thread), и у них нет общего "
"состояния. Для обмена данными между нитями используются очереди "
"сообщений, что позволяет уменьшить накладные расходы. Такой подход "
"накладывает ограничение на количество процессорных ядер, которые "
"Tarantool-сервер может использовать, но в то же время он позволяет "
"избежать конкуренции за шину памяти, а также дает запас масштабируемости "
"по скорости доступа к памяти и производительности сети. В результате "
"даже сильно нагруженный Tarantool-сервер в среднем использует процессор "
"не более чем на 10%. Кроме того, Tarantool поддерживает поиск как по "
"первичным, так и по **вторичным ключам в индексах**."

#: ../intro.rst:121
msgid ""
"**Tarantool's disk-based storage engine** is a fusion of ideas from "
"modern filesystems, log-structured merge trees and classical B-trees. "
"All data is organized into **runs**. Each run is represented by a file "
"on disk. Run size is a configuration option and normally is around 64MB. "
"Each run is a collection of pages, serving different purposes. Pages in "
"a fully merged run contain non-overlapping ranges of keys. A run can be "
"partially merged if there were a lot of changes in its key range "
"recently. In that case some pages represent new keys and values in the "
"run. The disk-based storage engine is append only: new data never "
"overwrites old data. The disk-based storage engine is named :ref:`vinyl "
"<index-vinyl>`."
msgstr ""
"**Дисковый движок** (:ref:`vinyl <index-vinyl>`) совмещает в себе "
"подходы, заимствованные из современных файловых систем, журналируемых "
"merge-деверьев (log-structured merge trees) и классических B-деревьев. "
"Все данные в этом движке разбиты по забегам (runs), где каждый забег "
"представляет собой файл на диске. Максимальный размер забега обычно "
"равен 64МБ, и его можно настраивать. Каждый забег -- это набор страниц, "
"которые нужны для каких-то целей. Если забег полностью смержен, то "
"диапазоны ключей на его страницах не пересекаются. Если же диапазоны "
"ключей в забеге в какой-то момент сильно изменялись, то мы имеем дело с "
"частично смерженным забегом. В этом случае на некоторых страницах "
"появились новые ключи и значения, которых ранее не было в данном забеге. "
"Дисковый движок обновляет данные по принципу дописывания в конец: новые "
"данные никогда не затирают старые."

#: ../intro.rst:132
msgid ""
"Tarantool supports **multi-part index keys**. The possible index types "
"are HASH, TREE, BITSET, and RTREE."
msgstr ""
"Tarantool поддерживает работу с **составными ключами в индексах**. "
"Возможные типы ключей: HASH, TREE, BITSET и RTREE."

#: ../intro.rst:135
msgid ""
"Tarantool supports **asynchronous replication**, locally or to remote "
"hosts. The replication architecture can be **master-master**, that is, "
"many nodes may both handle the loads and receive what others have "
"handled, for the same data sets."
msgstr ""
"Tarantool также поддерживает **асинхронную репликацию** -- как "
"локальную, так и на удаленных серверах. При этом репликацию можно "
"настроить по принципу **мастер-мастер**, когда несколько узлов могут не "
"только обрабатывать входящую нагрузку, но и получать данные от других "
"узлов."

#~ msgid ""
#~ "**Tarantool's disk-based storage engine** is a fusion of ideas from "
#~ "modern filesystems, log-structured merge trees and classical B-trees. "
#~ "All data is organized into **branches**. Each branch is represented "
#~ "by a file on disk. Branch size is a configuration option and normally "
#~ "is around 64MB. Each branch is a collection of pages, serving "
#~ "different purposes. Pages in a fully merged branch contain non-"
#~ "overlapping ranges of keys. A branch can be partially merged if there "
#~ "were a lot of changes in its key range recently. In that case some "
#~ "pages represent new keys and values in the branch. The disk-based "
#~ "storage engine is append only: new data never overwrites old data."
#~ msgstr ""
#~ "**Дисковый движок** в Tarantool'е совмещает в себе подходы, "
#~ "заимствованные из современных файловых систем, журналируемых merge-"
#~ "деверьев (log-structured merge trees) и классических B-деревьев. Все "
#~ "данные в этом движке разбиты по **веткам** (branches), где каждая "
#~ "ветка представляет собой файл на диске. Максимальный размер ветки "
#~ "обычно равен 64МБ, и его можно настраивать. Каждая ветка -- это набор "
#~ "страниц, которые нужны для какой-то общей цели. Если ветка полностью "
#~ "смержена, то диапазоны ключей ее на страницах не пересекаются. Если "
#~ "же диапазоны ключей в ветке в какой-то момент сильно изменялись, то "
#~ "мы имеем дело с частично смерженной веткой. В этом случае на "
#~ "некоторых страницах появились новые ключи и значения, которых ранее "
#~ "не было в данной ветке. Дисковый движок обновляет данные по принципу "
#~ "дописывания в конец: новые данные никогда не затирают старые."
