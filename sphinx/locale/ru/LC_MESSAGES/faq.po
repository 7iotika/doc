# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-03 08:48+0300\n"
"PO-Revision-Date: 2016-08-03 08:49+0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"Language: ru\n"
"X-Generator: Poedit 1.8.8\n"

#: ../faq.rst:28
msgid "FAQ"
msgstr "Вопросы и ответы"

#: ../faq.rst:39 ../faq.rst:44 ../faq.rst:51 ../faq.rst:62 ../faq.rst:68
#: ../faq.rst:74 ../faq.rst:79
msgid "Q: |br| A: |br|"
msgstr "Вопрос: |br| Ответ: |br|"

#: ../faq.rst:39
msgid ""
"Why Tarantool? |br| Tarantool is the latest generation of a family of in-"
"memory data servers developed for web applications. It is the result of "
"practical experience and trials within Mail.Ru since development began "
"in 2008."
msgstr ""
"Почему Tarantool? |br| Tarantool -- это in-memory сервер баз данных "
"последнего поколения, предназначенный для работы с веб-приложениями. "
"Разработка ведется с учетом многолетнего опыта использования Tarantool'а "
"в стенах Mail.Ru. Первый релиз состоялся в 2008 году."

#: ../faq.rst:44
msgid ""
"Why Lua? |br| Lua is a lightweight, fast, extensible multi-paradigm "
"language. Lua also happens to be very easy to embed. Lua coroutines "
"relate very closely to Tarantool fibers, and Lua architecture works well "
"with Tarantool internals. Lua acts well as a stored program language for "
"Tarantool, although connecting with other languages is also easy."
msgstr ""
"Почему Lua? |br| Lua -- это легкий, быстрый и расширяемый язык, "
"позволяющий использовать различные парадигмы программирования. Lua также "
"легко встраивается в различные приложения. Ко-рутины (coroutines) в Lua "
"близко соотносятся с файберами (fibers) в Tarantool'е, а вся Lua-"
"архитектура гладко ложится на его внутреннюю реализацию. Lua -- это "
"первый язык, на котором можно писать хранимые процедуры для Tarantool'а. "
"В будущем список поддерживаемых языков планируется расширить."

#: ../faq.rst:51
msgid ""
"What's the key advantage of Tarantool? |br| Tarantool provides a rich "
"database feature set (HASH, TREE, RTREE, BITSET indexes, secondary "
"indexes, composite indexes, transactions, triggers, asynchronous "
"replication) in a flexible environment of a Lua interpreter. |br| These "
"two properties make it possible to be a fast, atomic and reliable in-"
"memory data server which handles non-trivial application-specific logic. "
"The advantage over traditional SQL servers is in performance: low-"
"overhead, lock-free architecture means Tarantool can serve an order of "
"magnitude more requests per second, on comparable hardware. The "
"advantage over NoSQL alternatives is in flexibility: Lua allows flexible "
"processing of data stored in a compact, denormalized format."
msgstr ""
"В чем состоит главное преимущество Tarantool'а? |br| Tarantool "
"предоставляет богатый набор функций по работе с базами данных (HASH, "
"TREE, RTREE, BitSet-индексы, вторичные индексы, составные индексы, "
"транзакции, триггеры, асинхронная репликация), и всё это -- в гибкой "
"среде Lua-интерпретатора. |br| Эти два обстоятельства делают Tarantool "
"быстрым и надежным in-memory сервером баз данных с атомарными операциями "
"и сложной логикой на стороне сервера. Преимуществом Tarantool'а по "
"сравнению с традиционными SQL СУБД является его высокая "
"производительность: низкие накладные расходы и безблокировочная "
"архитектура позволяют Tarantool'у обрабатывать на порядок больше "
"запросов в секунду на аналогичном оборудовании. Преимущество же перед "
"другими NoSQL СУБД заключается в большей гибкости Tarantool'а: язык Lua "
"позволяет гибко обрабатывать данные, хранящиеся в компактном, "
"ненормализованном формате."

#: ../faq.rst:62
msgid ""
"What are your development plans? |br| We continuously improve server "
"performance. On the feature front, automatic sharding and synchronous "
"replication, and a subset of SQL are the major goals for 2016-2018. We "
"have an open roadmap to which we encourage anyone to add feature "
"requests."
msgstr ""
"Каковы ваши планы по развитию? |br| Мы постоянно улучшаем "
"производительность серверной части. Наши главные цели на 2016-2018 год "
"-- это автоматический шардинг и синхронная репликация, а также частичная "
"поддержка SQL. План работ находится в открытом доступе, и все желающие "
"могут оставлять запросы на добавление функционала."

#: ../faq.rst:68
msgid ""
"Who is developing Tarantool? |br| There is an engineering team employed "
"by Mail.Ru -- check out our commit logs on github.com/tarantool. The "
"development is fully open. Most of the connectors' authors, and the "
"maintainers for different distributions, come from the wider community."
msgstr ""
"Кто разрабатывает Tarantool? |br| Во-первых, этим занимается команда "
"разработки в Mail.Ru -- см. историю коммитов на github.com/tarantool. "
"Вся разработка ведется открытым образом. Кроме того, активную роль "
"играют члены сообщества разработчиков Tarantool'а. Их силами было "
"создано большинство коннекторов и ведутся доработки под разные "
"дистрибутивы."

#: ../faq.rst:74
msgid ""
"How serious is Mail.Ru about Tarantool? |br| Tarantool is an open source "
"project, distributed under a BSD license, so it does not depend on any "
"one sponsor. However, it is an integral part of the Mail.Ru backbone, so "
"it gets a lot of support from Mail.Ru."
msgstr ""
"Насколько серьезны планы Mail.Ru в отношении Tarantool'а? |br| Tarantool "
"-- это проект с открытым кодом, распространяемый под лицензией BSD, "
"поэтому он не зависит от внешних спонсоров. В то же время, Tarantool -- "
"это часть технологического \"костяка\" Mail.Ru, и поэтому он пользуется "
"сильной поддержкой со стороны Mail.Ru."

#: ../faq.rst:79
msgid ""
"Are there problems associated with being an in-memory server? |br| The "
"principal storage engine is designed for RAM plus persistent storage. It "
"is immune to data loss because there is a write-ahead log. Its memory-"
"allocation and compression techniques ensure there is no waste. And if "
"Tarantool runs out of memory, then it will stop accepting updates until "
"more memory is available, but will continue to handle read and delete "
"requests without difficulty. However, for databases which are much "
"larger than the available RAM space, Tarantool has a second storage "
"engine which is only limited by the available disk space."
msgstr ""
"Возникают ли проблемы из-за того, что Tarantool является in-memory "
"решением? |br| Основной движок баз данных в Tarantool'е работает с "
"оперативной памятью, но при этом он гарантирует сохранность данных "
"благодаря механизму WAL (write head log), т.е. журналу упреждающей "
"записи. Также в Tarantool'е используются технологии сжатия и "
"распределения данных, которые позволяют использовать все виды памяти "
"наиболее эффективно. Если Tarantool сталкивается с нехваткой оперативной "
"памяти, то он приостанавливает прием запросов на изменение данных до тех "
"пор, пока не появится свободная память, но при этом с успехом продолжает "
"обработку запросов на чтение и удаление данных. А для больших баз, где "
"объем данных значительно превосходит имеющийся объем оперативной памяти, "
"у Tarantool'а есть второй движок, чьи возможности ограничены лишь "
"размером жесткого диска."
