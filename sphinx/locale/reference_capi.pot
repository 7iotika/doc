# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-07-16 19:34+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../reference_capi/box.rst:28
msgid "Module `box`"
msgstr ""

#: ../reference_capi/box.rst:32
msgid "Opaque structure passed to the stored C procedure"
msgstr ""

#: ../reference_capi/box.rst:36
msgid "Return a tuple from stored C procedure."
msgstr ""

#: ../reference_capi/box.rst:38
msgid "Returned tuple is automatically reference counted by Tarantool."
msgstr ""

#: ../reference_capi/box.rst:40
msgid "an opaque structure passed to the stored C procedure by Tarantool"
msgstr ""

#: ../reference_capi/box.rst:42
msgid "a tuple to return"
msgstr ""

#: ../reference_capi/box.rst:44
msgid "-1 on error (perhaps, out of memory; check :ref:`box_error_last()<c_api-error-box_error_last>`)"
msgstr ""

#: ../reference_capi/box.rst:46
#: ../reference_capi/box.rst:90
#: ../reference_capi/box.rst:105
#: ../reference_capi/box.rst:121
#: ../reference_capi/box.rst:143
#: ../reference_capi/box.rst:165
#: ../reference_capi/tuple.rst:82
#: ../reference_capi/tuple.rst:95
msgid "0 otherwise"
msgstr ""

#: ../reference_capi/box.rst:50
msgid "Find space id by name."
msgstr ""

#: ../reference_capi/box.rst:52
msgid "This function performs SELECT request to _vspace system space."
msgstr ""

#: ../reference_capi/box.rst:54
msgid "space name"
msgstr ""

#: ../reference_capi/box.rst:55
#: ../reference_capi/box.rst:69
msgid "length of ``name``"
msgstr ""

#: ../reference_capi/box.rst:57
#: ../reference_capi/box.rst:71
msgid ":c:macro:`BOX_ID_NIL` on error or if not found (check :ref:`box_error_last()<c_api-error-box_error_last>`)"
msgstr ""

#: ../reference_capi/box.rst:59
#: ../reference_capi/box.rst:73
msgid "space_id otherwise"
msgstr ""

#: ../reference_capi/box.rst:61
msgid "See also: :c:type:`box_index_id_by_name`"
msgstr ""

#: ../reference_capi/box.rst:65
msgid "Find index id by name."
msgstr ""

#: ../reference_capi/box.rst:67
#: ../reference_capi/box.rst:83
#: ../reference_capi/box.rst:98
#: ../reference_capi/box.rst:113
#: ../reference_capi/box.rst:129
#: ../reference_capi/box.rst:151
#: ../reference_capi/box_index.rst:110
#: ../reference_capi/box_index.rst:149
#: ../reference_capi/box_index.rst:159
#: ../reference_capi/box_index.rst:169
#: ../reference_capi/box_index.rst:186
#: ../reference_capi/box_index.rst:202
#: ../reference_capi/box_index.rst:218
#: ../reference_capi/box_index.rst:234
msgid "space identifier"
msgstr ""

#: ../reference_capi/box.rst:68
msgid "index name"
msgstr ""

#: ../reference_capi/box.rst:75
msgid "This function performs SELECT request to _vindex system space."
msgstr ""

#: ../reference_capi/box.rst:77
msgid "See also: :c:type:`box_space_id_by_name`"
msgstr ""

#: ../reference_capi/box.rst:81
msgid "Execute an INSERT/REPLACE request."
msgstr ""

#: ../reference_capi/box.rst:84
#: ../reference_capi/box.rst:99
#: ../reference_capi/box.rst:153
msgid "encoded tuple in MsgPack Array format ([ field1, field2, ...])"
msgstr ""

#: ../reference_capi/box.rst:85
#: ../reference_capi/box.rst:100
#: ../reference_capi/box.rst:154
msgid "end of a ``tuple``"
msgstr ""

#: ../reference_capi/box.rst:86
#: ../reference_capi/box.rst:101
msgid "output argument. Resulted tuple. Can be set to NULL to discard result"
msgstr ""

#: ../reference_capi/box.rst:89
#: ../reference_capi/box.rst:104
#: ../reference_capi/box.rst:120
#: ../reference_capi/box.rst:142
msgid "-1 on error (check :ref:`box_error_last()<c_api-error-box_error_last>`)"
msgstr ""

#: ../reference_capi/box.rst:92
msgid "See also :ref:`space_object.insert()<box_space-insert>`"
msgstr ""

#: ../reference_capi/box.rst:96
msgid "Execute an REPLACE request."
msgstr ""

#: ../reference_capi/box.rst:107
msgid "See also :ref:`space_object.replace()<box_space-replace>`"
msgstr ""

#: ../reference_capi/box.rst:111
msgid "Execute an DELETE request."
msgstr ""

#: ../reference_capi/box.rst:114
#: ../reference_capi/box.rst:130
#: ../reference_capi/box.rst:152
#: ../reference_capi/box_index.rst:111
#: ../reference_capi/box_index.rst:150
#: ../reference_capi/box_index.rst:160
#: ../reference_capi/box_index.rst:170
#: ../reference_capi/box_index.rst:187
#: ../reference_capi/box_index.rst:203
#: ../reference_capi/box_index.rst:219
#: ../reference_capi/box_index.rst:235
msgid "index identifier"
msgstr ""

#: ../reference_capi/box.rst:115
#: ../reference_capi/box.rst:131
msgid "encoded key in MsgPack Array format ([ field1, field2, ...])"
msgstr ""

#: ../reference_capi/box.rst:116
#: ../reference_capi/box.rst:132
msgid "end of a ``key``"
msgstr ""

#: ../reference_capi/box.rst:117
#: ../reference_capi/box.rst:139
#: ../reference_capi/box.rst:161
msgid "output argument. Result an old tuple. Can be set to NULL to discard result"
msgstr ""

#: ../reference_capi/box.rst:123
msgid "See also :ref:`space_object.delete()<box_space-delete>`"
msgstr ""

#: ../reference_capi/box.rst:127
msgid "Execute an UPDATE request."
msgstr ""

#: ../reference_capi/box.rst:133
#: ../reference_capi/box.rst:155
msgid "encoded operations in MsgPack Arrat format, e.g. ``[[ '=', field_id,  value ], ['!', 2, 'xxx']]``"
msgstr ""

#: ../reference_capi/box.rst:135
#: ../reference_capi/box.rst:157
msgid "end of a ``ops``"
msgstr ""

#: ../reference_capi/box.rst:136
#: ../reference_capi/box.rst:158
msgid "0 if field_ids in update operation are zero-based indexed (like C) or 1 if for one-based indexed field ids (like Lua)."
msgstr ""

#: ../reference_capi/box.rst:145
msgid "See also :ref:`space_object.update()<box_space-update>`"
msgstr ""

#: ../reference_capi/box.rst:149
msgid "Execute an UPSERT request."
msgstr ""

#: ../reference_capi/box.rst:164
msgid "-1 on error (check ::ref:`box_error_last()<c_api-error-box_error_last>`)"
msgstr ""

#: ../reference_capi/box.rst:167
msgid "See also :ref:`space_object.upsert()<box_space-upsert>`"
msgstr ""

#: ../reference_capi/box_index.rst:28
msgid "Module `index`"
msgstr ""

#: ../reference_capi/box_index.rst:32
msgid "A space iterator"
msgstr ""

#: ../reference_capi/box_index.rst:38
msgid "Controls how to iterate over tuples in an index. Different index types support different iterator types. For example, one can start iteration from a particular value (request key) and then retrieve all tuples where keys are greater or equal (= GE) to this key."
msgstr ""

#: ../reference_capi/box_index.rst:43
msgid "If iterator type is not supported by the selected index type, iterator constructor must fail with ER_UNSUPPORTED. To be selectable for primary key, an index must support at least ITER_EQ and ITER_GE types."
msgstr ""

#: ../reference_capi/box_index.rst:47
msgid "NULL value of request key corresponds to the first or last key in the index, depending on iteration direction. (first key for GE and GT types, and last key for LE and LT). Therefore, to iterate over all tuples in an index, one can use ITER_GE or ITER_LE iteration types with start key equal to NULL. For ITER_EQ, the key must not be NULL."
msgstr ""

#: ../reference_capi/box_index.rst:55
msgid "key == x ASC order"
msgstr ""

#: ../reference_capi/box_index.rst:59
msgid "key == x DESC order"
msgstr ""

#: ../reference_capi/box_index.rst:63
msgid "all tuples"
msgstr ""

#: ../reference_capi/box_index.rst:67
msgid "key < x"
msgstr ""

#: ../reference_capi/box_index.rst:71
msgid "key <= x"
msgstr ""

#: ../reference_capi/box_index.rst:75
msgid "key >= x"
msgstr ""

#: ../reference_capi/box_index.rst:79
msgid "key > x"
msgstr ""

#: ../reference_capi/box_index.rst:83
msgid "all bits from x are set in key"
msgstr ""

#: ../reference_capi/box_index.rst:87
msgid "at least one x's bit is set"
msgstr ""

#: ../reference_capi/box_index.rst:91
msgid "all bits are not set"
msgstr ""

#: ../reference_capi/box_index.rst:95
msgid "key overlaps x"
msgstr ""

#: ../reference_capi/box_index.rst:99
msgid "tuples in distance ascending order from specified point"
msgstr ""

#: ../reference_capi/box_index.rst:105
msgid "Allocate and initialize iterator for space_id, index_id."
msgstr ""

#: ../reference_capi/box_index.rst:107
msgid "The returned iterator must be destroyed by :ref:`box_iterator_free<c_api-box_index-box_iterator_free>`."
msgstr ""

#: ../reference_capi/box_index.rst:112
#: ../reference_capi/box_index.rst:236
msgid ":ref:`iterator_type<c_api-box_index-iterator_type>`"
msgstr ""

#: ../reference_capi/box_index.rst:113
#: ../reference_capi/box_index.rst:188
#: ../reference_capi/box_index.rst:204
#: ../reference_capi/box_index.rst:220
#: ../reference_capi/box_index.rst:237
msgid "encode key in MsgPack Array format ([part1, part2, ...])"
msgstr ""

#: ../reference_capi/box_index.rst:114
#: ../reference_capi/box_index.rst:189
#: ../reference_capi/box_index.rst:205
#: ../reference_capi/box_index.rst:221
#: ../reference_capi/box_index.rst:238
msgid "the end of encoded ``key``"
msgstr ""

#: ../reference_capi/box_index.rst:116
msgid "NULL on error (check :ref:box_error_last`c_api-error-box_error_last>`)"
msgstr ""

#: ../reference_capi/box_index.rst:117
msgid "iterator otherwise"
msgstr ""

#: ../reference_capi/box_index.rst:119
msgid "See also :ref:`box_iterator_next<c_api-box_index-box_iterator_next>`, :ref:`box_iterator_free<c_api-box_index-box_iterator_free>`"
msgstr ""

#: ../reference_capi/box_index.rst:126
msgid "Retrieve the next item from the ``iterator``."
msgstr ""

#: ../reference_capi/box_index.rst:128
#: ../reference_capi/box_index.rst:142
msgid "an iterator returned by :ref:box_index_iterator`c_api-box_index-box_index_iterator>`"
msgstr ""

#: ../reference_capi/box_index.rst:130
msgid "output argument. result a tuple or NULL if there is no more data."
msgstr ""

#: ../reference_capi/box_index.rst:133
#: ../reference_capi/box_index.rst:152
#: ../reference_capi/box_index.rst:162
#: ../reference_capi/box_index.rst:193
msgid "-1 on error (check :ref:box_error_last`c_api-error-box_error_last>`)"
msgstr ""

#: ../reference_capi/box_index.rst:134
msgid "0 on success. The end of data is not an error."
msgstr ""

#: ../reference_capi/box_index.rst:140
msgid "Destroy and deallocate iterator."
msgstr ""

#: ../reference_capi/box_index.rst:147
msgid "Return the number of element in the index."
msgstr ""

#: ../reference_capi/box_index.rst:153
#: ../reference_capi/box_index.rst:163
msgid ">= 0 otherwise"
msgstr ""

#: ../reference_capi/box_index.rst:157
msgid "Return the number of bytes used in memory by the index."
msgstr ""

#: ../reference_capi/box_index.rst:167
msgid "Return a random tuple from the index (useful for statistical analysis)."
msgstr ""

#: ../reference_capi/box_index.rst:171
msgid "random seed"
msgstr ""

#: ../reference_capi/box_index.rst:172
#: ../reference_capi/box_index.rst:190
#: ../reference_capi/box_index.rst:206
#: ../reference_capi/box_index.rst:222
msgid "output argument. result a tuple or NULL if there is no tuples in space"
msgstr ""

#: ../reference_capi/box_index.rst:175
msgid "See also: :ref:`index_object.random<box_index-random>`"
msgstr ""

#: ../reference_capi/box_index.rst:179
msgid "Get a tuple from index by the key."
msgstr ""

#: ../reference_capi/box_index.rst:181
msgid "Please note that this function works much more faster than :ref:`index_object.select<box_index-select>` or :ref:`box_index_iterator<c_api-box_index-box_index_iterator>` + :ref:`box_iterator_next<c_api-box_index-box_iterator_next>`."
msgstr ""

#: ../reference_capi/box_index.rst:194
#: ../reference_capi/box_index.rst:210
#: ../reference_capi/box_index.rst:226
#: ../reference_capi/box_index.rst:241
#: ../reference_capi/txn.rst:41
#: ../reference_capi/txn.rst:48
#: ../reference_capi/utils.rst:90
msgid "0 on success"
msgstr ""

#: ../reference_capi/box_index.rst:196
msgid "See also: ``index_object.get()``"
msgstr ""

#: ../reference_capi/box_index.rst:200
msgid "Return a first (minimal) tuple matched the provided key."
msgstr ""

#: ../reference_capi/box_index.rst:209
#: ../reference_capi/box_index.rst:225
#: ../reference_capi/box_index.rst:240
msgid "-1 on error (check :ref:box_error_last()`c_api-error-box_error_last>`)"
msgstr ""

#: ../reference_capi/box_index.rst:212
msgid "See also: :ref:`index_object.min()<box_index-min>`"
msgstr ""

#: ../reference_capi/box_index.rst:216
msgid "Return a last (maximal) tuple matched the provided key."
msgstr ""

#: ../reference_capi/box_index.rst:228
msgid "See also: :ref:`index_object.max()<box_index-max>`"
msgstr ""

#: ../reference_capi/box_index.rst:232
msgid "Count the number of tuple matched the provided key."
msgstr ""

#: ../reference_capi/box_index.rst:243
msgid "See also: :ref:`index_object.count()<box_index-count>`"
msgstr ""

#: ../reference_capi/clock.rst:28
msgid "Module `clock`"
msgstr ""

#: ../reference_capi/coio.rst:28
msgid "Module `coio`"
msgstr ""

#: ../reference_capi/coio.rst:34
msgid "READ event"
msgstr ""

#: ../reference_capi/coio.rst:38
msgid "WRITE event"
msgstr ""

#: ../reference_capi/coio.rst:42
msgid "Wait until READ or WRITE event on socket (``fd``). Yields."
msgstr ""

#: ../reference_capi/coio.rst:44
msgid "non-blocking socket file description"
msgstr ""

#: ../reference_capi/coio.rst:45
msgid "requested events to wait. Combination of ``COIO_READ | COIO_WRITE`` bit flags."
msgstr ""

#: ../reference_capi/coio.rst:47
msgid "timeout in seconds."
msgstr ""

#: ../reference_capi/coio.rst:49
msgid "0 - timeout"
msgstr ""

#: ../reference_capi/coio.rst:50
msgid ">0 - returned events. Combination of ``TNT_IO_READ | TNT_IO_WRITE`` bit flags."
msgstr ""

#: ../reference_capi/coio.rst:54
msgid "Create new eio task with specified function and arguments. Yield and wait until the task is complete or a timeout occurs."
msgstr ""

#: ../reference_capi/coio.rst:57
msgid "This function doesn't throw exceptions to avoid double error checking: in most cases it's also necessary to check the return value of the called function and perform necessary actions. If func sets errno, the errno is preserved across the call."
msgstr ""

#: ../reference_capi/coio.rst:62
msgid "-1 and ``errno`` = ENOMEM if failed to create a task"
msgstr ""

#: ../reference_capi/coio.rst:63
msgid "the function return (``errno`` is preserved)."
msgstr ""

#: ../reference_capi/coio.rst:65
#: ../reference_capi/say.rst:74
#: ../reference_capi/tuple.rst:155
msgid "Example:"
msgstr ""

#: ../reference_capi/coio.rst:67
msgid "static ssize_t openfile_cb(va_list ap)\n"
"{\n"
"        const char* filename = va_arg(ap);\n"
"        int flags = va_arg(ap);\n"
"        return open(filename, flags);\n"
"}\n"
"\n"
"if (coio_call(openfile_cb, 0.10, \"/tmp/file\", 0) == -1)\n"
"    // handle errors.\n"
"..."
msgstr ""

#: ../reference_capi/coio.rst:83
msgid "Fiber-friendly version of :manpage:`getaddrinfo(3)`."
msgstr ""

#: ../reference_capi/error.rst:28
msgid "Module `error`"
msgstr ""

#: ../reference_capi/error.rst:154
msgid "Error - contains information about error."
msgstr ""

#: ../reference_capi/error.rst:158
msgid "Return the error type, e.g. \"ClientError\", \"SocketError\", etc."
msgstr ""

#: ../reference_capi/error.rst:160
#: ../reference_capi/error.rst:167
#: ../reference_capi/error.rst:174
msgid "error"
msgstr ""

#: ../reference_capi/error.rst:161
#: ../reference_capi/error.rst:175
msgid "not-null string"
msgstr ""

#: ../reference_capi/error.rst:165
msgid "Return IPROTO error code"
msgstr ""

#: ../reference_capi/error.rst:168
msgid "enum :ref:`box_error_code <capi-box_error_code>`"
msgstr ""

#: ../reference_capi/error.rst:172
msgid "Return the error message"
msgstr ""

#: ../reference_capi/error.rst:181
msgid "Get the information about the last API call error."
msgstr ""

#: ../reference_capi/error.rst:183
msgid "The Tarantool error handling works most like libc's errno. All API calls return -1 or NULL in the event of error. An internal pointer to box_error_t type is set by API functions to indicate what went wrong. This value is only significant if API call failed (returned -1 or NULL)."
msgstr ""

#: ../reference_capi/error.rst:188
msgid "Successful function can also touch the last error in some cases. You don't have to clear the last error before calling API functions. The returned object is valid only until next call to **any** API function."
msgstr ""

#: ../reference_capi/error.rst:192
msgid "You must set the last error using box_error_set() in your stored C procedures if you want to return a custom error message. You can re-throw the last API error to IPROTO client by keeping the current value and returning -1 to Tarantool from your stored procedure."
msgstr ""

#: ../reference_capi/error.rst:197
msgid "last error"
msgstr ""

#: ../reference_capi/error.rst:201
msgid "Clear the last error."
msgstr ""

#: ../reference_capi/error.rst:205
msgid "Set the last error."
msgstr ""

#: ../reference_capi/error.rst:209
msgid "IPROTO :ref:`error code<capi-box_error_code>`"
msgstr ""

#: ../reference_capi/error.rst:211
#: ../reference_capi/say.rst:56
#: ../reference_capi/say.rst:70
msgid "format arguments"
msgstr ""

#: ../reference_capi/error.rst:213
msgid "See also: IPROTO :ref:`error code<capi-box_error_code>`"
msgstr ""

#: ../reference_capi/error.rst:217
msgid "A backward-compatible API define."
msgstr ""

#: ../reference_capi/fiber.rst:28
msgid "Module `fiber`"
msgstr ""

#: ../reference_capi/fiber.rst:32
msgid "Fiber - contains information about fiber"
msgstr ""

#: ../reference_capi/fiber.rst:38
msgid "Create a new fiber."
msgstr ""

#: ../reference_capi/fiber.rst:40
msgid "Takes a fiber from fiber cache, if it's not empty. Can fail only if there is not enough memory for the fiber structure or fiber stack."
msgstr ""

#: ../reference_capi/fiber.rst:43
msgid "The created fiber automatically returns itself to the fiber cache when its \"main\" function completes."
msgstr ""

#: ../reference_capi/fiber.rst:46
msgid "string with fiber name"
msgstr ""

#: ../reference_capi/fiber.rst:47
msgid "func for run inside fiber"
msgstr ""

#: ../reference_capi/fiber.rst:49
msgid "See also: :ref:`fiber_start()<c_api-fiber-fiber_start>`"
msgstr ""

#: ../reference_capi/fiber.rst:53
msgid "Return control to another fiber and wait until it'll be woken."
msgstr ""

#: ../reference_capi/fiber.rst:55
msgid "See also: :ref:`fiber_wakeup()<c_api-fiber-fiber_wakeup>`"
msgstr ""

#: ../reference_capi/fiber.rst:61
msgid "Start execution of created fiber."
msgstr ""

#: ../reference_capi/fiber.rst:63
msgid "fiber to start"
msgstr ""

#: ../reference_capi/fiber.rst:64
msgid "arguments to start the fiber with"
msgstr ""

#: ../reference_capi/fiber.rst:70
msgid "Interrupt a synchronous wait of a fiber"
msgstr ""

#: ../reference_capi/fiber.rst:72
#: ../reference_capi/fiber.rst:108
msgid "fiber to be woken up"
msgstr ""

#: ../reference_capi/fiber.rst:76
msgid "Cancel the subject fiber (set ``FIBER_IS_CANCELLED`` flag)"
msgstr ""

#: ../reference_capi/fiber.rst:78
msgid "If target fiber's flag ``FIBER_IS_CANCELLABLE`` set, then it would be woken up (maybe prematurely). Then current fiber yields until the target fiber is dead (or is woken up by :ref:`fiber_wakeup()<c_api-fiber-fiber_wakeup>`)."
msgstr ""

#: ../reference_capi/fiber.rst:82
msgid "fiber to be cancelled"
msgstr ""

#: ../reference_capi/fiber.rst:86
msgid "Make it possible or not possible to wakeup the current fiber immediately when it's cancelled."
msgstr ""

#: ../reference_capi/fiber.rst:89
#: ../reference_capi/fiber.rst:100
msgid "fiber"
msgstr ""

#: ../reference_capi/fiber.rst:90
#: ../reference_capi/fiber.rst:101
msgid "status to set"
msgstr ""

#: ../reference_capi/fiber.rst:92
msgid "previous state"
msgstr ""

#: ../reference_capi/fiber.rst:98
msgid "Set fiber to be joinable (``false`` by default)."
msgstr ""

#: ../reference_capi/fiber.rst:105
msgid "Wait until the fiber is dead and then move its execution status to the caller. The fiber must not be detached."
msgstr ""

#: ../reference_capi/fiber.rst:110
msgid "Before: ``FIBER_IS_JOINABLE`` flag is set."
msgstr ""

#: ../reference_capi/fiber.rst:112
msgid "See also: :ref:`fiber_set_joinable()<c_api-fiber-fiber_set_joinable>`"
msgstr ""

#: ../reference_capi/fiber.rst:116
msgid "Put the current fiber to sleep for at least 's' seconds."
msgstr ""

#: ../reference_capi/fiber.rst:118
msgid "time to sleep"
msgstr ""

#: ../reference_capi/fiber.rst:120
msgid "Note: this is a cancellation point."
msgstr ""

#: ../reference_capi/fiber.rst:122
msgid "See also: :ref:`fiber_is_cancelled()<c_api-fiber-fiber_is_cancelled>`"
msgstr ""

#: ../reference_capi/fiber.rst:128
msgid "Check current fiber for cancellation (it must be checked manually)."
msgstr ""

#: ../reference_capi/fiber.rst:132
msgid "Report loop begin time as double (cheap)."
msgstr ""

#: ../reference_capi/fiber.rst:136
msgid "Report loop begin time as 64-bit int."
msgstr ""

#: ../reference_capi/fiber.rst:140
msgid "Reschedule fiber to end of event loop cycle."
msgstr ""

#: ../reference_capi/fiber.rst:146
msgid "Return slab_cache suitable to use with ``tarantool/small`` library"
msgstr ""

#: ../reference_capi/index.rst:28
msgid "C API reference"
msgstr ""

#: ../reference_capi/latch.rst:28
msgid "Module `latch`"
msgstr ""

#: ../reference_capi/latch.rst:32
msgid "A lock for cooperative multitasking environment"
msgstr ""

#: ../reference_capi/latch.rst:36
msgid "Allocate and initialize the new latch."
msgstr ""

#: ../reference_capi/latch.rst:38
msgid "allocated latch object"
msgstr ""

#: ../reference_capi/latch.rst:39
msgid "box_latch_t *"
msgstr ""

#: ../reference_capi/latch.rst:43
msgid "Destroy and free the latch."
msgstr ""

#: ../reference_capi/latch.rst:45
msgid "latch to destroy"
msgstr ""

#: ../reference_capi/latch.rst:49
msgid "Lock a latch. Waits indefinitely until the current fiber can gain access to the latch."
msgstr ""

#: ../reference_capi/latch.rst:52
#: ../reference_capi/latch.rst:58
msgid "latch to lock"
msgstr ""

#: ../reference_capi/latch.rst:56
msgid "Try to lock a latch. Return immediately if the latch is locked."
msgstr ""

#: ../reference_capi/latch.rst:59
msgid "status of operation. 0 - success, 1 - latch is locked"
msgstr ""

#: ../reference_capi/latch.rst:60
msgid "int"
msgstr ""

#: ../reference_capi/latch.rst:64
msgid "Unlock a latch. The fiber calling this function must own the latch."
msgstr ""

#: ../reference_capi/latch.rst:66
msgid "latch to unlock"
msgstr ""

#: ../reference_capi/say.rst:28
msgid "Module `say` (logging)"
msgstr ""

#: ../reference_capi/say.rst:36
msgid "do not use this value directly"
msgstr ""

#: ../reference_capi/say.rst:52
#: ../reference_capi/say.rst:67
msgid "Format and print a message to Tarantool log file."
msgstr ""

#: ../reference_capi/say.rst:54
msgid ":ref:`log level <c_api-say-say_level>`"
msgstr ""

#: ../reference_capi/say.rst:55
#: ../reference_capi/say.rst:69
msgid "``printf()``-like format string"
msgstr ""

#: ../reference_capi/say.rst:58
#: ../reference_capi/say.rst:72
msgid "See also :manpage:`printf(3)`, :ref:`say_level<c_api-say-say_level>`"
msgstr ""

#: ../reference_capi/say.rst:76
msgid "say_info(\"Some useful information: %s\", status);"
msgstr ""

#: ../reference_capi/schema.rst:28
msgid "Module `schema`"
msgstr ""

#: ../reference_capi/schema.rst:36
msgid "Start of the reserved range of system spaces."
msgstr ""

#: ../reference_capi/schema.rst:40
msgid "Space id of _schema."
msgstr ""

#: ../reference_capi/schema.rst:44
msgid "Space id of _space."
msgstr ""

#: ../reference_capi/schema.rst:48
msgid "Space id of _vspace view."
msgstr ""

#: ../reference_capi/schema.rst:52
msgid "Space id of _index."
msgstr ""

#: ../reference_capi/schema.rst:56
msgid "Space id of _vindex view."
msgstr ""

#: ../reference_capi/schema.rst:60
msgid "Space id of _func."
msgstr ""

#: ../reference_capi/schema.rst:64
msgid "Space id of _vfunc view."
msgstr ""

#: ../reference_capi/schema.rst:68
msgid "Space id of _user."
msgstr ""

#: ../reference_capi/schema.rst:72
msgid "Space id of _vuser view."
msgstr ""

#: ../reference_capi/schema.rst:76
msgid "Space id of _priv."
msgstr ""

#: ../reference_capi/schema.rst:80
msgid "Space id of _vpriv view."
msgstr ""

#: ../reference_capi/schema.rst:84
msgid "Space id of _cluster."
msgstr ""

#: ../reference_capi/schema.rst:88
msgid "End of reserved range of system spaces."
msgstr ""

#: ../reference_capi/schema.rst:92
msgid "NULL value, returned on error."
msgstr ""

#: ../reference_capi/trivia.rst:28
msgid "Module `trivia/config`"
msgstr ""

#: ../reference_capi/trivia.rst:32
msgid "Extern modifier for all public functions."
msgstr ""

#: ../reference_capi/trivia.rst:36
msgid "Package major version - 1 for 1.7.0."
msgstr ""

#: ../reference_capi/trivia.rst:40
msgid "Package minor version - 7 for 1.7.0."
msgstr ""

#: ../reference_capi/trivia.rst:44
msgid "Package patch version - 0 for 1.7.0."
msgstr ""

#: ../reference_capi/trivia.rst:48
msgid "A string with major-minor-patch-commit-id identifier of the release, e.g. 1.7.0-1216-g73f7154."
msgstr ""

#: ../reference_capi/trivia.rst:53
msgid "System configuration dir (e.g ``/etc``)"
msgstr ""

#: ../reference_capi/trivia.rst:57
msgid "Install prefix (e.g. ``/usr``)"
msgstr ""

#: ../reference_capi/trivia.rst:61
msgid "Build type, e.g. Debug or Release"
msgstr ""

#: ../reference_capi/trivia.rst:65
msgid "CMake build type signature, e.g. ``Linux-x86_64-Debug``"
msgstr ""

#: ../reference_capi/trivia.rst:69
msgid "Command line used to run CMake."
msgstr ""

#: ../reference_capi/trivia.rst:73
msgid "Pathes to C and CXX compilers."
msgstr ""

#: ../reference_capi/trivia.rst:77
msgid "C compile flags used to build Tarantool."
msgstr ""

#: ../reference_capi/trivia.rst:81
msgid "CXX compile flags used to build Tarantool."
msgstr ""

#: ../reference_capi/trivia.rst:85
msgid "A path to install ``*.lua`` module files."
msgstr ""

#: ../reference_capi/trivia.rst:89
msgid "A path to install ``*.so``/``*.dylib`` module files."
msgstr ""

#: ../reference_capi/trivia.rst:93
msgid "A path to Lua includes (the same directory where this file is contained)"
msgstr ""

#: ../reference_capi/trivia.rst:97
msgid "A constant added to ``package.path`` in Lua to find ``*.lua`` module files."
msgstr ""

#: ../reference_capi/trivia.rst:101
msgid "A constant added to ``package.cpath`` in Lua to find ``*.so`` module files."
msgstr ""

#: ../reference_capi/tuple.rst:28
msgid "Module `tuple`"
msgstr ""

#: ../reference_capi/tuple.rst:36
msgid "Tuple format."
msgstr ""

#: ../reference_capi/tuple.rst:38
msgid "Each Tuple has associated format (class). Default format is used to create tuples which are not attach to any particular space."
msgstr ""

#: ../reference_capi/tuple.rst:43
msgid "Tuple"
msgstr ""

#: ../reference_capi/tuple.rst:49
msgid "Allocate and initialize a new tuple from a raw MsgPack Array data."
msgstr ""

#: ../reference_capi/tuple.rst:51
msgid "tuple format. Use :ref:`box_tuple_format_default()<c_api-tuple-box_tuple_format_default>` to create space-independent tuple."
msgstr ""

#: ../reference_capi/tuple.rst:54
msgid "tuple data in MsgPack Array format ([field1, field2, ...])"
msgstr ""

#: ../reference_capi/tuple.rst:55
msgid "the end of ``data``"
msgstr ""

#: ../reference_capi/tuple.rst:57
#: ../reference_capi/txn.rst:62
msgid "NULL on out of memory"
msgstr ""

#: ../reference_capi/tuple.rst:58
msgid "tuple otherwise"
msgstr ""

#: ../reference_capi/tuple.rst:60
msgid "See also: :ref:`box.tuple.new()<box_tuple-new>`"
msgstr ""

#: ../reference_capi/tuple.rst:66
msgid "Increase the reference counter of tuple."
msgstr ""

#: ../reference_capi/tuple.rst:68
msgid "Tuples are reference counted. All functions that return tuples guarantee that the last returned tuple is refcounted internally until the next call to API function that yields or returns another tuple."
msgstr ""

#: ../reference_capi/tuple.rst:72
msgid "You should increase the reference counter before taking tuples for long processing in your code. Such tuples will not be garbage collected even if another fiber remove they from space. After processing please decrement the reference counter using :ref:`box_tuple_unref()<c_api-tuple-box_tuple_unref>`, otherwise the tuple will leak."
msgstr ""

#: ../reference_capi/tuple.rst:79
#: ../reference_capi/tuple.rst:92
#: ../reference_capi/tuple.rst:105
#: ../reference_capi/tuple.rst:111
#: ../reference_capi/tuple.rst:130
#: ../reference_capi/tuple.rst:140
msgid "a tuple"
msgstr ""

#: ../reference_capi/tuple.rst:81
#: ../reference_capi/tuple.rst:94
#: ../reference_capi/tuple.rst:123
msgid "-1 on error"
msgstr ""

#: ../reference_capi/tuple.rst:84
msgid "See also: :ref:`box_tuple_unref()<c_api-tuple-box_tuple_unref>`"
msgstr ""

#: ../reference_capi/tuple.rst:90
msgid "Decrease the reference counter of tuple."
msgstr ""

#: ../reference_capi/tuple.rst:97
msgid "See also: :ref:`box_tuple_ref()<c_api-tuple-box_tuple_ref>`"
msgstr ""

#: ../reference_capi/tuple.rst:103
msgid "Return the number of fields in tuple (the size of MsgPack Array)."
msgstr ""

#: ../reference_capi/tuple.rst:109
msgid "Return the number of bytes used to store internal tuple data (MsgPack Array)."
msgstr ""

#: ../reference_capi/tuple.rst:115
msgid "Dump raw MsgPack data to the memory buffer ``buf`` of size ``size``."
msgstr ""

#: ../reference_capi/tuple.rst:117
msgid "Store tuple fields in the memory buffer."
msgstr ""

#: ../reference_capi/tuple.rst:119
msgid "Upon successful return, the function returns the number of bytes written. If buffer size is not enough then the return value is the number of bytes which would have been written if enough space had been available."
msgstr ""

#: ../reference_capi/tuple.rst:124
msgid "number of bytes written on success."
msgstr ""

#: ../reference_capi/tuple.rst:128
msgid "Return the associated format."
msgstr ""

#: ../reference_capi/tuple.rst:132
msgid "tuple format"
msgstr ""

#: ../reference_capi/tuple.rst:136
msgid "Return the raw tuple field in MsgPack format."
msgstr ""

#: ../reference_capi/tuple.rst:138
msgid "The buffer is valid until next call to box_tuple_* functions."
msgstr ""

#: ../reference_capi/tuple.rst:141
msgid "zero-based index in MsgPack array."
msgstr ""

#: ../reference_capi/tuple.rst:143
msgid "NULL if i >= :ref:`box_tuple_field_count()<c_api-tuple-box_tuple_field_count>`"
msgstr ""

#: ../reference_capi/tuple.rst:144
msgid "msgpack otherwise"
msgstr ""

#: ../reference_capi/tuple.rst:148
msgid "Tuple iterator"
msgstr ""

#: ../reference_capi/tuple.rst:152
msgid "Allocate and initialize a new tuple iterator. The tuple iterator allow to iterate over fields at root level of MsgPack array."
msgstr ""

#: ../reference_capi/tuple.rst:157
msgid "box_tuple_iterator_t* it = box_tuple_iterator(tuple);\n"
"if (it == NULL) {\n"
"    // error handling using box_error_last()\n"
"}\n"
"const char* field;\n"
"while (field = box_tuple_next(it)) {\n"
"    // process raw MsgPack data\n"
"}\n"
"\n"
"// rewind iterator to first position\n"
"box_tuple_rewind(it)\n"
"assert(box_tuple_position(it) == 0);\n"
"\n"
"// rewind three fields\n"
"field = box_tuple_seek(it, 3);\n"
"assert(box_tuple_position(it) == 4);\n"
"\n"
"box_iterator_free(it);"
msgstr ""

#: ../reference_capi/tuple.rst:180
msgid "Destroy and free tuple iterator"
msgstr ""

#: ../reference_capi/tuple.rst:186
msgid "Return zero-based next position in iterator. That is, this function return the field id of field that will be returned by the next call to :ref:`box_tuple_next()<c_api-tuple-box_tuple_next>`. Returned value is zero after initialization or rewind and :ref:`box_tuple_field_count()<c_api-tuple-box_tuple_field_count>` after the end of iteration."
msgstr ""

#: ../reference_capi/tuple.rst:193
#: ../reference_capi/tuple.rst:200
#: ../reference_capi/tuple.rst:211
msgid "a tuple iterator"
msgstr ""

#: ../reference_capi/tuple.rst:194
msgid "position"
msgstr ""

#: ../reference_capi/tuple.rst:198
msgid "Rewind iterator to the initial position."
msgstr ""

#: ../reference_capi/tuple.rst:202
msgid "After: ``box_tuple_position(it) == 0``"
msgstr ""

#: ../reference_capi/tuple.rst:206
msgid "Seek the tuple iterator."
msgstr ""

#: ../reference_capi/tuple.rst:208
msgid "The returned buffer is valid until next call to box_tuple_* API. Requested field_no returned by next call to box_tuple_next(it)."
msgstr ""

#: ../reference_capi/tuple.rst:212
msgid "field number - zero-based position in MsgPack array"
msgstr ""

#: ../reference_capi/tuple.rst:215
msgid "After:"
msgstr ""

#: ../reference_capi/tuple.rst:217
msgid "``box_tuple_position(it) == field_not`` if returned value is not NULL."
msgstr ""

#: ../reference_capi/tuple.rst:218
msgid "``box_tuple_position(it) == box_tuple_field_count(tuple)`` if returned value is NULL."
msgstr ""

#: ../reference_capi/tuple.rst:225
msgid "Return the next tuple field from tuple iterator."
msgstr ""

#: ../reference_capi/tuple.rst:227
msgid "The returned buffer is valid until next call to box_tuple_* API."
msgstr ""

#: ../reference_capi/tuple.rst:230
msgid "NULL if there are no more fields"
msgstr ""

#: ../reference_capi/tuple.rst:231
msgid "MsgPack otherwise"
msgstr ""

#: ../reference_capi/tuple.rst:233
msgid "Before: :ref:`box_tuple_position()<c_api-tuple-box_tuple_position>` is zero-based ID of returned field."
msgstr ""

#: ../reference_capi/tuple.rst:236
msgid "After: ``box_tuple_position(it) == box_tuple_field_count(tuple)`` if returned value is NULL."
msgstr ""

#: ../reference_capi/txn.rst:28
msgid "Module `txn`"
msgstr ""

#: ../reference_capi/txn.rst:32
msgid "Return true if there is an active transaction."
msgstr ""

#: ../reference_capi/txn.rst:36
msgid "Begin a transaction in the current fiber."
msgstr ""

#: ../reference_capi/txn.rst:38
msgid "A transaction is attached to caller fiber, therefore one fiber can have only one active transaction."
msgstr ""

#: ../reference_capi/txn.rst:42
msgid "-1 on error. Perhaps a transaction has already been started"
msgstr ""

#: ../reference_capi/txn.rst:46
msgid "Commit the current transaction."
msgstr ""

#: ../reference_capi/txn.rst:49
msgid "-1 on error. Perhaps a disk write failure"
msgstr ""

#: ../reference_capi/txn.rst:53
msgid "Rollback the current transaction."
msgstr ""

#: ../reference_capi/txn.rst:57
msgid "Allocate memory on txn memory pool."
msgstr ""

#: ../reference_capi/txn.rst:59
msgid "The memory is automatically deallocated when the transaction is committed or rolled back."
msgstr ""

#: ../reference_capi/utils.rst:28
msgid "Module `lua/utils`"
msgstr ""

#: ../reference_capi/utils.rst:34
msgid "Push cdata of given ``ctypeid`` onto the stack."
msgstr ""

#: ../reference_capi/utils.rst:36
msgid "CTypeID must be used from FFI at least once. Allocated memory returned uninitialized. Only numbers and pointers are supported."
msgstr ""

#: ../reference_capi/utils.rst:39
#: ../reference_capi/utils.rst:52
#: ../reference_capi/utils.rst:67
#: ../reference_capi/utils.rst:74
#: ../reference_capi/utils.rst:87
#: ../reference_capi/utils.rst:99
#: ../reference_capi/utils.rst:106
msgid "Lua State"
msgstr ""

#: ../reference_capi/utils.rst:40
msgid "FFI's CTypeID of this cdata"
msgstr ""

#: ../reference_capi/utils.rst:42
#: ../reference_capi/utils.rst:56
msgid "memory associated with this cdata"
msgstr ""

#: ../reference_capi/utils.rst:44
msgid "See also: :ref:`luaL_checkcdata()<c_api-utils-luaL_checkcdata>`"
msgstr ""

#: ../reference_capi/utils.rst:50
msgid "Checks whether the function argument ``idx`` is a cdata"
msgstr ""

#: ../reference_capi/utils.rst:53
#: ../reference_capi/utils.rst:68
msgid "stack index"
msgstr ""

#: ../reference_capi/utils.rst:54
msgid "output argument. FFI's CTypeID of returned cdata"
msgstr ""

#: ../reference_capi/utils.rst:58
msgid "See also: :ref:`luaL_pushcdata()<c_api-utils-luaL_pushcdata>`"
msgstr ""

#: ../reference_capi/utils.rst:62
msgid "Sets finalizer function on a cdata object."
msgstr ""

#: ../reference_capi/utils.rst:64
msgid "Equivalent to call `ffi.gc(obj, function)`. Finalizer function must be on the top of the stack."
msgstr ""

#: ../reference_capi/utils.rst:72
msgid "Return CTypeID (FFI) of given СDATA type"
msgstr ""

#: ../reference_capi/utils.rst:75
msgid "C type name as string (e.g. \"struct request\" or \"uint32_t\")"
msgstr ""

#: ../reference_capi/utils.rst:78
msgid "CTypeID"
msgstr ""

#: ../reference_capi/utils.rst:80
msgid "See also: :ref:`luaL_pushcdata()<c_api-utils-luaL_pushcdata>`,"
msgstr ""

#: ../reference_capi/utils.rst:81
msgid ":ref:`luaL_checkcdata()<c_api-utils-luaL_checkcdata>`"
msgstr ""

#: ../reference_capi/utils.rst:85
msgid "Declare symbols for FFI"
msgstr ""

#: ../reference_capi/utils.rst:88
msgid "C definitions (e.g. \"struct stat\")"
msgstr ""

#: ../reference_capi/utils.rst:91
msgid "``LUA_ERRRUN``, ``LUA_ERRMEM` or ``LUA_ERRERR`` otherwise."
msgstr ""

#: ../reference_capi/utils.rst:93
msgid "See also: ``ffi.cdef(def)``"
msgstr ""

#: ../reference_capi/utils.rst:97
msgid "Push uint64_t onto the stack"
msgstr ""

#: ../reference_capi/utils.rst:100
#: ../reference_capi/utils.rst:107
msgid "value to push"
msgstr ""

#: ../reference_capi/utils.rst:104
msgid "Push int64_t onto the stack"
msgstr ""

#: ../reference_capi/utils.rst:111
#: ../reference_capi/utils.rst:125
msgid "Checks whether the argument idx is a uint64 or a convertable string and returns this number."
msgstr ""

#: ../reference_capi/utils.rst:114
#: ../reference_capi/utils.rst:121
msgid "error if the argument can't be converted"
msgstr ""

#: ../reference_capi/utils.rst:118
#: ../reference_capi/utils.rst:132
msgid "Checks whether the argument idx is a int64 or a convertable string and returns this number."
msgstr ""

#: ../reference_capi/utils.rst:128
#: ../reference_capi/utils.rst:135
msgid "the converted number or 0 of argument can't be converted"
msgstr ""

