
msgid "Module `buffer`"
msgstr "Модуль `buffer`"

msgid ""
"The ``buffer`` module returns a dynamically resizable buffer which is "
"solely for use as an option for methods of the :ref:`net.box module "
"<net_box-module>`."
msgstr ""
"Модуль ``buffer`` возвращает буфер, допускающий динамическое изменение "
"размера, который используется только в качестве опции для методов "
":ref:`модуля net.box <net_box-module>`."

msgid ""
"Ordinarily the ``net.box`` methods return a Lua table. If a ``buffer`` "
"option is used, then the ``net.box`` methods return a raw MsgPack_ "
"string. This saves time on the server, if the client application has its "
"own routine for decoding MsgPack strings."
msgstr ""
"Как правило, модуль ``net.box`` возвращает Lua-таблицу. Если используется"
" опция ``buffer``, то методы модуля ``net.box`` возвращают "
"неформатированную строку MsgPack_. Это экономит время работы на сервере, "
"если в клиентском приложении есть собственная процедура декодирования "
"MsgPack-строк."

msgid "return"
msgstr "возвращает"

msgid "a descriptor of a buffer."
msgstr "дескриптор буфера."

msgid "rtype"
msgstr "тип возвращаемого значения"

msgid "cdata"
msgstr "cdata."

msgid "**Example:**"
msgstr "**Пример:**"

msgid ""
"Assume a Tarantool server is listening on farhost:3301. Assume it has a "
"space ``T`` with one tuple: ``'ABCDE', 12345``. In this example we start "
"up a server on localhost:3302 and then use ``net.box`` routines to "
"connect to farhost. Then we create a buffer, and use it as an option for "
"a ``conn.space...select()`` call. The result will be in MsgPack_ format. "
"To show this, we will use :ref:`msgpack.decode_unchecked() <msgpack-"
"decode_unchecked>` on ``ibuf.rpos`` (the \"read position\" of the "
"buffer). Thus we do not decode on the remote server, but we do decode on "
"the local server."
msgstr ""
"Предположим, что Tarantool-сервер настроен на прослушивание на "
"farhost:3301. Предположим, что на нем есть спейс ``T`` с одним кортежем: "
"``'ABCDE', 12345``. В данном примере запустим сервер на localhost:3302, а"
" затем используем процедуры ``net.box`` для подключения к farhost. Затем "
"создадим буфер и используем его как опцию для вызова "
"``conn.space...select()``. Результат получим в формате MsgPack_. Чтобы "
"показать это, используем :ref:`msgpack.decode_unchecked() <msgpack-"
"decode_unchecked>` на ``ibuf.rpos`` (\"позиция для чтения\" в буфере). "
"Таким образом, мы проведем декодирование не на удаленном сервере, а на "
"локальном."

msgid ""
"box.cfg{listen=3302}\n"
"buffer = require('buffer')\n"
"ibuf = buffer.ibuf()\n"
"net_box = require('net.box')\n"
"conn = net_box.connect('farhost:3301')\n"
"buffer = require('buffer')\n"
"conn.space.T:select({},{buffer=ibuf})\n"
"msgpack = require('msgpack')\n"
"msgpack.decode_unchecked(ibuf.rpos)"
msgstr ""
"box.cfg{listen=3302}\n"
"buffer = require('buffer')\n"
"ibuf = buffer.ibuf()\n"
"net_box = require('net.box')\n"
"conn = net_box.connect('farhost:3301')\n"
"buffer = require('buffer')\n"
"conn.space.T:select({},{buffer=ibuf})\n"
"msgpack = require('msgpack')\n"
"msgpack.decode_unchecked(ibuf.rpos)"

msgid "The result of the final request looks like this:"
msgstr "Результат последнего запроса выглядит следующим образом:"

msgid ""
"tarantool> msgpack.decode_unchecked(ibuf.rpos)\n"
"---\n"
"- {48: [['ABCDE', 12345]]}\n"
"- 'cdata<char *>: 0x7f97ba10c041'\n"
"..."
msgstr ""
"tarantool> msgpack.decode_unchecked(ibuf.rpos)\n"
"---\n"
"- {48: [['ABCDE', 12345]]}\n"
"- 'cdata<char *>: 0x7f97ba10c041'\n"
"..."

msgid ""
"Before Tarantool version 1.7.7, the function to use for this case is "
"``msgpack.ibuf_decode(ibuf.rpos)``. Starting with Tarantool version "
"1.7.7, ``ibuf_decode`` is deprecated."
msgstr ""
"До версии 1.7.7 Tarantool'а в данном случае следует использовать функцию "
"``msgpack.ibuf_decode(ibuf.rpos)``. Начиная с версии  1.7.7 Tarantool'а ,"
" ``ibuf_decode`` объявлена устаревшей."
