# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 2.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-06 13:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Module `msgpack`"
msgstr ""

msgid "Overview"
msgstr ""

msgid "The ``msgpack`` module takes strings in MsgPack_ format and decodes them, or takes a series of non-MsgPack values and encodes them. Tarantool makes heavy internal use of MsgPack because tuples in Tarantool are :ref:`stored <index-box_lua-vs-msgpack>` as MsgPack arrays."
msgstr ""

msgid "Index"
msgstr ""

msgid "Below is a list of all ``msgpack`` functions and members."
msgstr ""

msgid "Name"
msgstr ""

msgid "Use"
msgstr ""

msgid ":ref:`msgpack.encode() <msgpack-encode>`"
msgstr ""

msgid "Convert a Lua object to an MsgPack string"
msgstr ""

msgid ":ref:`msgpack.decode() <msgpack-decode>`"
msgstr ""

msgid "Convert a MsgPack string to a Lua object"
msgstr ""

msgid ":ref:`msgpack.decode_unchecked() <msgpack-decode_unchecked>`"
msgstr ""

msgid ":ref:`msgpack.NULL <msgpack-null>`"
msgstr ""

msgid "Analog of Lua's \"nil\""
msgstr ""

msgid ":ref:`msgpack.decode_array_header <msgpack-decode_array_header>`"
msgstr ""

msgid "Skip array header in a MsgPack string"
msgstr ""

msgid ":ref:`msgpack.decode_map_header <msgpack-decode_map_header>`"
msgstr ""

msgid "Skip map header in a MsgPack string"
msgstr ""

msgid ":ref:`msgpack.cfg <msgpack-cfg>`"
msgstr ""

msgid "Change configuration"
msgstr ""

msgid "Convert a Lua object to a MsgPack string."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "either a scalar value or a Lua table value."
msgstr ""

msgid "return"
msgstr ""

msgid "the original value reformatted as a MsgPack string."
msgstr ""

msgid "rtype"
msgstr ""

msgid "string"
msgstr ""

msgid "Convert a MsgPack string to a Lua object."
msgstr ""

msgid "a string formatted as MsgPack."
msgstr ""

msgid "where to start, minimum = 1, maximum = string length, default = 1."
msgstr ""

msgid "(if ``msgpack_string`` is in valid MsgPack format) the original contents of ``msgpack_string``, formatted as a Lua table, (otherwise) a scalar value, such as a string or a number;"
msgstr ""

msgid "\"next_start_position\". If ``decode`` stops after parsing as far as byte N in ``msgpack_string``, then \"next_start_position\" will equal N + 1, and ``decode(msgpack_string, next_start_position)`` will continue parsing from where the previous ``decode`` stopped, plus 1. Normally ``decode`` parses all of ``msgpack_string``, so \"next_start_position\" will equal ``string.len(msgpack_string)`` + 1."
msgstr ""

msgid "table and number"
msgstr ""

msgid "Convert a MsgPack string to a Lua object. Because checking is skipped, ``decode_unchecked()`` can operate with string pointers to buffers which ``decode()`` cannot handle. For an example see the :ref:`buffer <buffer-module>` module."
msgstr ""

msgid "the original contents formatted as a Lua table;"
msgstr ""

msgid "the number of bytes that were decoded."
msgstr ""

msgid "lua object"
msgstr ""

msgid "A value comparable to Lua \"nil\" which may be useful as a placeholder in a tuple."
msgstr ""

msgid "Call the mp_decode_array function in the `MsgPuck <http://rtsisyk.github.io/msgpuck/>`_ library and return the array size and a pointer to the first array component. A subsequent call to ``msgpack_decode`` can decode the component instead of the whole array."
msgstr ""

msgid "a pointer to a byte array formatted as MsgPack."
msgstr ""

msgid "a number greater than or equal to the string's length"
msgstr ""

msgid "the size of the array;"
msgstr ""

msgid "a pointer to after the array header."
msgstr ""

msgid "-- Example of decode_array_header\n"
"-- Suppose we have the raw data '\\x93\\x01\\x02\\x03'.\n"
"-- \\x93 is MsgPack encoding for a header of a three-item array.\n"
"-- We want to skip it and decode the next three items.\n"
"msgpack=require('msgpack'); ffi=require('ffi')\n"
"x,y=msgpack.decode_array_header(ffi.cast('char*','\\x93\\x01\\x02\\x03'),4)\n"
"a=msgpack.decode(y,1);b=msgpack.decode(y+1,1);c=msgpack.decode(y+2,1);\n"
"a,b,c\n"
"-- The result will be: 1,2,3."
msgstr ""

msgid "Call the mp_decode_map function in the `MsgPuck <http://rtsisyk.github.io/msgpuck/>`_ library and return the map size and a pointer to the first map component. A subsequent call to ``msgpack_decode`` can decode the component instead of the whole map."
msgstr ""

msgid "a number greater than or equal to the byte array's length"
msgstr ""

msgid "the size of the map;"
msgstr ""

msgid "a pointer to after the map header."
msgstr ""

msgid "-- Example of decode_map_header\n"
"-- Suppose we have the raw data '\\x81\\xa2\\x41\\x41\\xc3'.\n"
"-- \\x81 is MsgPack encoding for a header of a one-item map.\n"
"-- We want to skip it and decode the next map item.\n"
"msgpack=require('msgpack'); ffi=require('ffi')\n"
"x,y=msgpack.decode_map_header(ffi.cast('char*','\\x81\\xa2\\x41\\x41\\xc3'),5)\n"
"a=msgpack.decode(y,3);b=msgpack.decode(y+3,1)\n"
"x,a,b\n"
"-- The result will be: 1,\"AA\", true."
msgstr ""

msgid "Example"
msgstr ""

msgid "tarantool> msgpack = require('msgpack')\n"
"---\n"
"...\n"
"tarantool> y = msgpack.encode({'a',1,'b',2})\n"
"---\n"
"...\n"
"tarantool> z = msgpack.decode(y)\n"
"---\n"
"...\n"
"tarantool> z[1], z[2], z[3], z[4]\n"
"---\n"
"- a\n"
"- 1\n"
"- b\n"
"- 2\n"
"...\n"
"tarantool> box.space.tester:insert{20, msgpack.NULL, 20}\n"
"---\n"
"- [20, null, 20]\n"
"..."
msgstr ""

msgid "The MsgPack output structure can be specified with ``__serialize``:"
msgstr ""

msgid "``__serialize = \"seq\" or \"sequence\"`` for an array"
msgstr ""

msgid "``__serialize = \"map\" or \"mapping\"`` for a map"
msgstr ""

msgid "Serializing 'A' and 'B' with different ``__serialize`` values causes different results. To show this, here is a routine which encodes `{'A','B'}` both as an array and as a map, then displays each result in hexadecimal."
msgstr ""

msgid "function hexdump(bytes)\n"
"    local result = ''\n"
"    for i = 1, #bytes do\n"
"        result = result .. string.format(\"%x\", string.byte(bytes, i)) .. ' '\n"
"    end\n"
"    return result\n"
"end\n"
"\n"
"msgpack = require('msgpack')\n"
"m1 = msgpack.encode(setmetatable({'A', 'B'}, {\n"
"                             __serialize = \"seq\"\n"
"                          }))\n"
"m2 = msgpack.encode(setmetatable({'A', 'B'}, {\n"
"                             __serialize = \"map\"\n"
"                          }))\n"
"print('array encoding: ', hexdump(m1))\n"
"print('map encoding: ', hexdump(m2))"
msgstr ""

msgid "**Result:**"
msgstr ""

msgid "**array** encoding: 92 a1 41 a1 42\n"
"**map** encoding:   82 01 a1 41 02 a1 42"
msgstr ""

msgid "The MsgPack Specification_ page explains that the first encoding means:"
msgstr ""

msgid "fixarray(2), fixstr(1), \"A\", fixstr(1), \"B\""
msgstr ""

msgid "and the second encoding means:"
msgstr ""

msgid "fixmap(2), key(1), fixstr(1), \"A\", key(2), fixstr(2), \"B\""
msgstr ""

msgid "Here are examples for all the common types, with the Lua-table representation on the left, with the MsgPack format name and encoding on the right."
msgstr ""

msgid "**Common Types and MsgPack Encodings**"
msgstr ""

msgid "{}"
msgstr ""

msgid "'fixmap' if metatable is 'map' = 80 otherwise 'fixarray' = 90"
msgstr ""

msgid "'a'"
msgstr ""

msgid "'fixstr' = a1 61"
msgstr ""

msgid "false"
msgstr ""

msgid "'false' = c2"
msgstr ""

msgid "true"
msgstr ""

msgid "'true' = c3"
msgstr ""

msgid "127"
msgstr ""

msgid "'positive fixint' = 7f"
msgstr ""

msgid "65535"
msgstr ""

msgid "'uint 16' = cd ff ff"
msgstr ""

msgid "4294967295"
msgstr ""

msgid "'uint 32' = ce ff ff ff ff"
msgstr ""

msgid "nil"
msgstr ""

msgid "'nil' = c0"
msgstr ""

msgid "msgpack.NULL"
msgstr ""

msgid "same as nil"
msgstr ""

msgid "[0] = 5"
msgstr ""

msgid "'fixmap(1)' + 'positive fixint' (for the key) + 'positive fixint' (for the value) = 81 00 05"
msgstr ""

msgid "[0] = nil"
msgstr ""

msgid "'fixmap(0)' = 80 -- nil is not stored when it is a missing map value"
msgstr ""

msgid "1.5"
msgstr ""

msgid "'float 64' = cb 3f f8 00 00 00 00 00 00"
msgstr ""

msgid "Some MsgPack configuration settings can be changed, in the same way that they can be changed for json. See :ref:`Module JSON <json-module_cfg>` for a list of some configuration settings. (The same configuration settings exist for json, for MsgPack, and for  :ref:`YAML <yaml-module>`.)"
msgstr ""

msgid "For example, if ``msgpack.cfg.encode_invalid_numbers = true`` (the default), then nan and inf are legal values. If that is not desirable, then ensure that ``msgpack.encode()`` will not accept them, by saying ``msgpack.cfg{encode_invalid_numbers = false}``, thus:"
msgstr ""

msgid " tarantool> msgpack = require('msgpack'); msgpack.cfg{encode_invalid_numbers = true}\n"
" ---\n"
" ...\n"
" tarantool> msgpack.decode(msgpack.encode{1, 0 / 0, 1 / 0, false})\n"
" ---\n"
" - [1, -nan, inf, false]\n"
" - 22\n"
" ...\n"
" tarantool> msgpack.cfg{encode_invalid_numbers = false}\n"
"---\n"
"...\n"
" tarantool> msgpack.decode(msgpack.encode{1, 0 / 0, 1 / 0, false})\n"
" ---\n"
" - error: ... number must not be NaN or Inf'\n"
"..."
msgstr ""

