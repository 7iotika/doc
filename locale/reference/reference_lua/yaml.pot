# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-06 14:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Module `yaml`"
msgstr ""

msgid "Overview"
msgstr ""

msgid "The ``yaml`` module takes strings in YAML_ format and decodes them, or takes a series of non-YAML values and encodes them."
msgstr ""

msgid "Index"
msgstr ""

msgid "Below is a list of all ``yaml`` functions and members."
msgstr ""

msgid "Name"
msgstr ""

msgid "Use"
msgstr ""

msgid ":ref:`yaml.encode() <yaml-encode>`"
msgstr ""

msgid "Convert a Lua object to a YAML string"
msgstr ""

msgid ":ref:`yaml.decode() <yaml-decode>`"
msgstr ""

msgid "Convert a YAML string to a Lua object"
msgstr ""

msgid ":ref:`yaml.NULL <yaml-null>`"
msgstr ""

msgid "Analog of Lua's \"nil\""
msgstr ""

msgid "Convert a Lua object to a YAML string."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "either a scalar value or a Lua table value."
msgstr ""

msgid "return"
msgstr ""

msgid "the original value reformatted as a YAML string."
msgstr ""

msgid "rtype"
msgstr ""

msgid "string"
msgstr ""

msgid "Convert a YAML string to a Lua object."
msgstr ""

msgid "a string formatted as YAML."
msgstr ""

msgid "the original contents formatted as a Lua table."
msgstr ""

msgid "table"
msgstr ""

msgid "A value comparable to Lua \"nil\" which may be useful as a placeholder in a tuple."
msgstr ""

msgid "Example"
msgstr ""

msgid "tarantool> yaml = require('yaml')\n"
"---\n"
"...\n"
"tarantool> y = yaml.encode({'a', 1, 'b', 2})\n"
"---\n"
"...\n"
"tarantool> z = yaml.decode(y)\n"
"---\n"
"...\n"
"tarantool> z[1], z[2], z[3], z[4]\n"
"---\n"
"- a\n"
"- 1\n"
"- b\n"
"- 2\n"
"...\n"
"tarantool> if yaml.NULL == nil then print('hi') end\n"
"hi\n"
"---\n"
"..."
msgstr ""

msgid "The `YAML collection style <http://yaml.org/spec/1.1/#id930798>`_ can be specified with ``__serialize``:"
msgstr ""

msgid "``__serialize=\"sequence\"`` for a Block Sequence array,"
msgstr ""

msgid "``__serialize=\"seq\"`` for a Flow Sequence array,"
msgstr ""

msgid "``__serialize=\"mapping\"`` for a Block Mapping map,"
msgstr ""

msgid "``__serialize=\"map\"`` for a Flow Mapping map."
msgstr ""

msgid "Serializing 'A' and 'B' with different ``__serialize`` values causes different results:"
msgstr ""

msgid "tarantool> yaml = require('yaml')\n"
"---\n"
"...\n"
"tarantool> yaml.encode(setmetatable({'A', 'B'}, { __serialize=\"sequence\"}))\n"
"---\n"
"- |\n"
"  ---\n"
"  - A\n"
"  - B\n"
"  ...\n"
"...\n"
"tarantool> yaml.encode(setmetatable({'A', 'B'}, { __serialize=\"seq\"}))\n"
"---\n"
"- |\n"
"  ---\n"
"  ['A', 'B']\n"
"  ...\n"
"...\n"
"tarantool> yaml.encode({setmetatable({f1 = 'A', f2 = 'B'}, { __serialize=\"map\"})})\n"
"---\n"
"- |\n"
"  ---\n"
"  - {'f2': 'B', 'f1': 'A'}\n"
"  ...\n"
"...\n"
"tarantool> yaml.encode({setmetatable({f1 = 'A', f2 = 'B'}, { __serialize=\"mapping\"})})\n"
"---\n"
"- |\n"
"  ---\n"
"  - f2: B\n"
"    f1: A\n"
"  ...\n"
"..."
msgstr ""

msgid "Also, some YAML configuration settings for encoding can be changed, in the same way that they can be changed for :ref:`JSON <json-module_cfg>`."
msgstr ""

